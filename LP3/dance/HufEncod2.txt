# program to implement Huffman Encoding using a greedy strategy


from collections import Counter 

class NodeTree(object): 
  def _ init__(self, left=None, right=None): 
        self.left = left 
        self.right = right 

  def children(self): 
        return self.left, self.right 

  def _ str__(self): 
        return self.left, self.right 


def huffman_code_tree(node, binString=''): 
   if type(node) is str: 
      return {node: binString} 
(1, r) = node.children() 
d = dict() 
d.update(huffman_code_tree(1, binString + '@')) 
d.update(huffman_code_tree(r, binString + '1')) 
return d 

def make_tree(nodes): 
    while len(nodes) > 1: 
        (key1, c1) = nodes[-1] 
        (key2, c2) = nodes[-2] 
         nodes = nodes[:-2] 
         node = NodeTree(key1, key2) 
         nodes.append((node, c1 + c2)) 
         nodes = sorted(nodes, key=lambda x: x[1], reverse=True) 
   return nodes[0][@] 

if _name_ == '_ main_': 
    string = "BCAADDDCCACACAC' 
    freq = dict(Counter(string) ) 
    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True) 
    node = make_tree(freq) 
    encoding = huffman_code_tree(node) 
    for i in encoding: 
        print(f'{i} : {encoding[i]}') 
   


